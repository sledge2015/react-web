// components/AdminPanel/index.tsx - Ant Design 重构版本import React, { useState, useEffect } from 'react';import {  Layout,  Card,  Table,  Button,  Space,  Tag,  Typography,  Row,  Col,  Statistic,  Modal,  Form,  Input,  Switch,  InputNumber,  Select,  DatePicker,  message,  Popconfirm,  Alert,  Tabs,  Avatar,  Tooltip,  Progress} from 'antd';import {  UserOutlined,  TeamOutlined,  StockOutlined,  ClockCircleOutlined,  DatabaseOutlined,  DeleteOutlined,  EditOutlined,  PlusOutlined,  ReloadOutlined,  SettingOutlined,  ExclamationCircleOutlined,  SecurityScanOutlined,  SafetyOutlined,  FileTextOutlined,  WarningOutlined} from '@ant-design/icons';import { LineChart, Line, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, ResponsiveContainer } from 'recharts';import { useAuth } from '../../../hooks/useAuth';import { User } from '../../../types/auth';const { Header, Content } = Layout;const { Title, Text } = Typography;const { TabPane } = Tabs;const { Option } = Select;// 定义接口interface User {  id: string;  username: string;  email: string;  role: 'admin' | 'user';  avatar?: string;  createdAt: string;  lastLogin?: string;  isActive: boolean;}interface SystemStats {  totalUsers: number;  activeUsers: number;  totalStocks: number;  systemUptime: string;  lastBackup: string;  memoryUsage: number;  cpuUsage: number;  diskUsage: number;}interface UserActivity {  id: string;  username: string;  action: string;  timestamp: string;  details?: string;  level: 'info' | 'warning' | 'error';}// 注意：这里需要从实际的认证系统导入// import { useAuth } from '../../hooks/useAuth';const AdminPanel: React.FC = () => {  // 注意：需要从实际的认证系统获取用户信息和权限  // const { user, hasPermission } = useAuth();  const user = { username: 'Admin' }; // 临时占位符，实际应该从认证系统获取  const hasPermission = (permission: string) => true; // 临时占位符，实际应该从认证系统获取  const [activeTab, setActiveTab] = useState('overview');  const [stats, setStats] = useState<SystemStats>({    totalUsers: 156,    activeUsers: 89,    totalStocks: 2341,    systemUptime: '15天 7小时',    lastBackup: '2小时前',    memoryUsage: 68,    cpuUsage: 45,    diskUsage: 72,  });  const [users, setUsers] = useState<User[]>([]);  const [activities, setActivities] = useState<UserActivity[]>([]);  const [loading, setLoading] = useState(false);  const [userModalVisible, setUserModalVisible] = useState(false);  const [editingUser, setEditingUser] = useState<User | null>(null);  const [form] = Form.useForm();  // 获取用户列表 - 需要替换为实际的API调用  const fetchUsers = async () => {    setLoading(true);    try {      // TODO: 替换为实际的API调用      const response = await userAPI.getUsers();      setUsers(response.data);      // 临时提示 - 实际应用中删除      // console.log('需要实现实际的用户数据获取API');      // setUsers([]);    } catch (error) {      message.error('获取用户列表失败');    } finally {      setLoading(false);    }  };  // 获取活动日志 - 需要替换为实际的API调用  const fetchActivities = async () => {    // TODO: 替换为实际的API调用    // const response = await activityAPI.getActivities();    // setActivities(response.data);    // 临时提示 - 实际应用中删除    console.log('需要实现实际的活动日志获取API');    setActivities([]);  };  // 删除用户  const handleDeleteUser = (userId: string) => {    if (!hasPermission('user.delete')) {      message.error('权限不足：您没有删除用户的权限');      return;    }    // TODO: 替换为实际的API调用    const userToDelete = users.find(u => u.id === userId);    Modal.confirm({      title: '确认删除',      icon: <ExclamationCircleOutlined />,      content: `确定要删除用户 "${userToDelete?.username}" 吗？此操作不可撤销。`,      okText: '删除',      okType: 'danger',      cancelText: '取消',      async onOk() {        try {          // await userAPI.deleteUser(userId);          setUsers(users.filter(u => u.id !== userId));          message.success(`用户 "${userToDelete?.username}" 已成功删除`);        } catch (error) {          message.error('删除用户失败');        }      },    });  };  // 重置用户密码  const handleResetPassword = (userId: string) => {    if (!hasPermission('user.update')) {      message.error('权限不足：您没有重置密码的权限');      return;    }    const userToReset = users.find(u => u.id === userId);    Modal.confirm({      title: '重置密码',      icon: <ExclamationCircleOutlined />,      content: `确定要重置用户 "${userToReset?.username}" 的密码吗？新密码将发送到用户邮箱。`,      okText: '重置',      cancelText: '取消',      async onOk() {        try {          // TODO: 替换为实际的API调用          // await userAPI.resetPassword(userId);          message.success(`用户 "${userToReset?.username}" 的密码已重置，新密码已发送到邮箱`);        } catch (error) {          message.error('重置密码失败');        }      },    });  };  // 添加/编辑用户  const handleSaveUser = async (values: any) => {    try {      if (editingUser) {        // 编辑用户        // TODO: 替换为实际的API调用        // await userAPI.updateUser(editingUser.id, values);        const updatedUsers = users.map(u =>          u.id === editingUser.id ? { ...u, ...values } : u        );        setUsers(updatedUsers);        message.success('用户信息已更新');      } else {        // 添加新用户        // TODO: 替换为实际的API调用        // const newUser = await userAPI.createUser(values);        const newUser: User = {          id: `user-${Date.now()}`,          ...values,          createdAt: new Date().toISOString(),          isActive: true,        };        setUsers([...users, newUser]);        message.success('用户已成功添加');      }      setUserModalVisible(false);      setEditingUser(null);      form.resetFields();    } catch (error) {      message.error('操作失败，请重试');    }  };  // 用户表格列定义  const userColumns = [    {      title: '用户',      key: 'user',      render: (_: any, record: User) => (        <Space>          <Avatar size="large">{record.avatar}</Avatar>          <div>            <Text strong>{record.username}</Text>            <br />            <Text type="secondary" style={{ fontSize: '12px' }}>              {record.email}            </Text>          </div>        </Space>      ),    },    {      title: '角色',      dataIndex: 'role',      key: 'role',      render: (role: string) => (        <Tag color={role === 'admin' ? 'red' : 'blue'}>          {role === 'admin' ? '管理员' : '普通用户'}        </Tag>      ),    },    {      title: '状态',      dataIndex: 'isActive',      key: 'isActive',      render: (isActive: boolean) => (        <Tag color={isActive ? 'green' : 'default'}>          {isActive ? '活跃' : '停用'}        </Tag>      ),    },    {      title: '注册时间',      dataIndex: 'createdAt',      key: 'createdAt',      render: (date: string) => new Date(date).toLocaleDateString('zh-CN'),    },    {      title: '最后登录',      dataIndex: 'lastLogin',      key: 'lastLogin',      render: (date: string) =>        date ? new Date(date).toLocaleString('zh-CN') : '从未登录',    },    {      title: '操作',      key: 'action',      render: (_: any, record: User) => (        <Space>          {hasPermission('user.update') && (            <Tooltip title="编辑用户">              <Button                type="text"                icon={<EditOutlined />}                onClick={() => {                  setEditingUser(record);                  form.setFieldsValue(record);                  setUserModalVisible(true);                }}              />            </Tooltip>          )}          {hasPermission('user.update') && (            <Tooltip title="重置密码">              <Button                type="text"                icon={<SecurityScanOutlined />}                onClick={() => handleResetPassword(record.id)}              />            </Tooltip>          )}          {hasPermission('user.delete') && record.role !== 'admin' && (            <Tooltip title="删除用户">              <Button                type="text"                danger                icon={<DeleteOutlined />}                onClick={() => handleDeleteUser(record.id)}              />            </Tooltip>          )}        </Space>      ),    },  ];  // 活动日志表格列定义  const activityColumns = [    {      title: '时间',      dataIndex: 'timestamp',      key: 'timestamp',      width: 180,      render: (timestamp: string) => new Date(timestamp).toLocaleString('zh-CN'),    },    {      title: '用户',      dataIndex: 'username',      key: 'username',      width: 120,      render: (username: string) => (        <Tag color="blue">{username}</Tag>      ),    },    {      title: '操作',      dataIndex: 'action',      key: 'action',      width: 150,    },    {      title: '级别',      dataIndex: 'level',      key: 'level',      width: 100,      render: (level: string) => {        const colors = {          info: 'blue',          warning: 'orange',          error: 'red',        };        const icons = {          info: <FileTextOutlined />,          warning: <WarningOutlined />,          error: <ExclamationCircleOutlined />,        };        return (          <Tag color={colors[level as keyof typeof colors]} icon={icons[level as keyof typeof icons]}>            {level.toUpperCase()}          </Tag>        );      },    },    {      title: '详情',      dataIndex: 'details',      key: 'details',    },  ];  // 系统性能数据（模拟）  const performanceData = [    { time: '00:00', cpu: 20, memory: 45, network: 30 },    { time: '04:00', cpu: 15, memory: 48, network: 25 },    { time: '08:00', cpu: 35, memory: 52, network: 45 },    { time: '12:00', cpu: 45, memory: 68, network: 60 },    { time: '16:00', cpu: 38, memory: 65, network: 55 },    { time: '20:00', cpu: 28, memory: 58, network: 40 },  ];  useEffect(() => {    // 注意：实际应用中需要根据权限控制数据获取    // if (hasPermission('user.read')) {    //   fetchUsers();    // }    // fetchActivities();    // 临时提示 - 实际应用中删除    console.log('AdminPanel mounted - 需要实现实际的数据获取逻辑');  }, []);  if (!hasPermission('system.config')) {    return (      <Layout style={{ minHeight: '100vh' }}>        <Content style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>          <Alert            message="访问被拒绝"            description="您没有权限访问管理员面板"            type="error"            showIcon            icon={<ExclamationCircleOutlined />}          />        </Content>      </Layout>    );  }  return (    <Layout style={{ minHeight: '100vh' }}>      <Header style={{        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',        padding: '0 24px',        display: 'flex',        alignItems: 'center'      }}>        <Title level={3} style={{ color: 'white', margin: 0 }}>          ⚙️ 管理员控制台        </Title>        <Text style={{ color: 'rgba(255,255,255,0.8)', marginLeft: 16 }}>          欢迎回来，{user?.username}！        </Text>      </Header>      <Content style={{ padding: '24px' }}>        <Tabs activeKey={activeTab} onChange={setActiveTab} size="large">          <TabPane tab="系统概览" key="overview" icon={<DatabaseOutlined />}>            {/* 统计卡片 */}            <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>              <Col xs={24} sm={12} lg={6}>                <Card>                  <Statistic                    title="总用户数"                    value={stats.totalUsers}                    prefix={<TeamOutlined />}                    valueStyle={{ color: '#1890ff' }}                  />                </Card>              </Col>              <Col xs={24} sm={12} lg={6}>                <Card>                  <Statistic                    title="活跃用户"                    value={stats.activeUsers}                    prefix={<UserOutlined />}                    valueStyle={{ color: '#52c41a' }}                  />                </Card>              </Col>              <Col xs={24} sm={12} lg={6}>                <Card>                  <Statistic                    title="监控股票"                    value={stats.totalStocks}                    prefix={<StockOutlined />}                    valueStyle={{ color: '#faad14' }}                  />                </Card>              </Col>              <Col xs={24} sm={12} lg={6}>                <Card>                  <Statistic                    title="系统运行时间"                    value={stats.systemUptime}                    prefix={<ClockCircleOutlined />}                    valueStyle={{ color: '#722ed1' }}                  />                </Card>              </Col>            </Row>            {/* 系统性能监控 */}            <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>              <Col xs={24} lg={16}>                <Card title="系统性能监控" extra={<Button icon={<ReloadOutlined />} size="small">刷新</Button>}>                  <ResponsiveContainer width="100%" height={300}>                    <AreaChart data={performanceData}>                      <CartesianGrid strokeDasharray="3 3" />                      <XAxis dataKey="time" />                      <YAxis />                      <RechartsTooltip />                      <Area type="monotone" dataKey="cpu" stackId="1" stroke="#1890ff" fill="#1890ff" fillOpacity={0.6} />                      <Area type="monotone" dataKey="memory" stackId="1" stroke="#52c41a" fill="#52c41a" fillOpacity={0.6} />                      <Area type="monotone" dataKey="network" stackId="1" stroke="#faad14" fill="#faad14" fillOpacity={0.6} />                    </AreaChart>                  </ResponsiveContainer>                </Card>              </Col>              <Col xs={24} lg={8}>                <Card title="资源使用情况">                  <Space direction="vertical" style={{ width: '100%' }} size="large">                    <div>                      <Text>CPU 使用率</Text>                      <Progress                        percent={stats.cpuUsage}                        status={stats.cpuUsage > 80 ? 'exception' : 'normal'}                        strokeColor={stats.cpuUsage > 80 ? '#ff4d4f' : '#1890ff'}                      />                    </div>                    <div>                      <Text>内存使用率</Text>                      <Progress                        percent={stats.memoryUsage}                        status={stats.memoryUsage > 80 ? 'exception' : 'normal'}                        strokeColor={stats.memoryUsage > 80 ? '#ff4d4f' : '#52c41a'}                      />                    </div>                    <div>                      <Text>磁盘使用率</Text>                      <Progress                        percent={stats.diskUsage}                        status={stats.diskUsage > 80 ? 'exception' : 'normal'}                        strokeColor={stats.diskUsage > 80 ? '#ff4d4f' : '#faad14'}                      />                    </div>                  </Space>                </Card>              </Col>            </Row>            {/* 最近活动 */}            <Card title="最近活动" extra={<Text type="secondary">最新 5 条</Text>}>              <Table                columns={activityColumns}                dataSource={activities.slice(0, 5)}                pagination={false}                size="small"                rowKey="id"              />            </Card>          </TabPane>          {hasPermission('user.read') && (            <TabPane tab="用户管理" key="users" icon={<TeamOutlined />}>              <Card                title={`用户管理 (${users.length})`}                extra={                  hasPermission('user.create') && (                    <Button                      type="primary"                      icon={<PlusOutlined />}                      onClick={() => {                        setEditingUser(null);                        form.resetFields();                        setUserModalVisible(true);                      }}                    >                      添加用户                    </Button>                  )                }              >                <Table                  columns={userColumns}                  dataSource={users}                  loading={loading}                  rowKey="id"                  pagination={{                    pageSize: 10,                    showSizeChanger: true,                    showQuickJumper: true,                    showTotal: (total, range) =>                      `显示 ${range[0]}-${range[1]} 条，共 ${total} 条数据`,                  }}                />              </Card>            </TabPane>          )}          <TabPane tab="系统设置" key="system" icon={<SettingOutlined />}>            <Row gutter={[16, 16]}>              <Col xs={24} md={12}>                <Card title="数据刷新设置" extra={<SafetyOutlined />}>                  <Form layout="vertical">                    <Form.Item label="刷新间隔 (秒)">                      <InputNumber min={10} max={300} defaultValue={30} style={{ width: '100%' }} />                    </Form.Item>                    <Form.Item label="自动刷新">                      <Switch defaultChecked />                    </Form.Item>                    <Form.Item>                      <Button type="primary">保存设置</Button>                    </Form.Item>                  </Form>                </Card>              </Col>              <Col xs={24} md={12}>                <Card title="安全设置" extra={<SecurityScanOutlined />}>                  <Form layout="vertical">                    <Form.Item label="启用双因素认证">                      <Switch defaultChecked />                    </Form.Item>                    <Form.Item label="记录用户活动">                      <Switch defaultChecked />                    </Form.Item>                    <Form.Item label="会话超时 (分钟)">                      <InputNumber min={15} max={480} defaultValue={60} style={{ width: '100%' }} />                    </Form.Item>                    <Form.Item>                      <Button type="primary">保存设置</Button>                    </Form.Item>                  </Form>                </Card>              </Col>              <Col xs={24}>                <Card title="系统维护" extra={<WarningOutlined />}>                  <Space wrap>                    <Button icon={<DatabaseOutlined />}>立即备份</Button>                    <Button icon={<DeleteOutlined />}>清理日志</Button>                    <Popconfirm                      title="确定要重启系统吗？"                      description="系统重启可能会影响正在使用的用户"                      okText="确认重启"                      cancelText="取消"                      onConfirm={() => message.success('系统重启指令已发送')}                    >                      <Button danger icon={<ReloadOutlined />}>重启系统</Button>                    </Popconfirm>                  </Space>                  <Alert                    message="最后备份时间"                    description={stats.lastBackup}                    type="info"                    showIcon                    style={{ marginTop: 16 }}                  />                </Card>              </Col>            </Row>          </TabPane>          {hasPermission('system.logs') && (            <TabPane tab="活动日志" key="logs" icon={<FileTextOutlined />}>              <Card                title="系统活动日志"                extra={                  <Space>                    <Select defaultValue="" placeholder="用户筛选" style={{ width: 120 }}>                      <Option value="">所有用户</Option>                      <Option value="admin">管理员</Option>                      <Option value="user">普通用户</Option>                    </Select>                    <Select defaultValue="" placeholder="操作类型" style={{ width: 120 }}>                      <Option value="">所有操作</Option>                      <Option value="login">登录</Option>                      <Option value="stock">股票操作</Option>                      <Option value="system">系统操作</Option>                    </Select>                    <DatePicker placeholder="选择日期" />                    <Button icon={<ReloadOutlined />}>刷新</Button>                  </Space>                }              >                <Table                  columns={activityColumns}                  dataSource={activities}                  rowKey="id"                  pagination={{                    pageSize: 20,                    showSizeChanger: true,                    showQuickJumper: true,                    showTotal: (total, range) =>                      `显示 ${range[0]}-${range[1]} 条，共 ${total} 条数据`,                  }}                />              </Card>            </TabPane>          )}        </Tabs>        {/* 用户模态框 */}        <Modal          title={editingUser ? '编辑用户' : '添加用户'}          open={userModalVisible}          onCancel={() => {            setUserModalVisible(false);            setEditingUser(null);            form.resetFields();          }}          footer={null}          width={500}        >          <Form            form={form}            layout="vertical"            onFinish={handleSaveUser}          >            <Form.Item              name="username"              label="用户名"              rules={[                { required: true, message: '请输入用户名' },                { min: 3, message: '用户名至少需要3个字符' }              ]}            >              <Input placeholder="请输入用户名" />            </Form.Item>            <Form.Item              name="email"              label="邮箱"              rules={[                { required: true, message: '请输入邮箱' },                { type: 'email', message: '请输入有效的邮箱地址' }              ]}            >              <Input placeholder="请输入邮箱地址" />            </Form.Item>            <Form.Item              name="role"              label="角色"              rules={[{ required: true, message: '请选择角色' }]}            >              <Select placeholder="请选择角色">                <Option value="user">普通用户</Option>                <Option value="admin">管理员</Option>              </Select>            </Form.Item>            <Form.Item              name="avatar"              label="头像"            >              <Input placeholder="请输入头像表情符号" />            </Form.Item>            <Form.Item>              <Space style={{ width: '100%', justifyContent: 'flex-end' }}>                <Button onClick={() => setUserModalVisible(false)}>                  取消                </Button>                <Button type="primary" htmlType="submit">                  {editingUser ? '更新' : '添加'}                </Button>              </Space>            </Form.Item>          </Form>        </Modal>      </Content>    </Layout>  );};// 命名导出（可选）export { AdminPanel };// 默认导出export default AdminPanel;