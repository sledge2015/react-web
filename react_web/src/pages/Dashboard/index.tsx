// pages/Dashboard/index.tsximport React, { useState, useEffect } from 'react';import { useAuth } from '../../hooks/useAuth';import { AdminPanel } from '../../components/AdminPanel';import { stockService, UserStock } from '../../services/stockService';import './Dashboard.css';// 数据项类型定义 - 基于API响应interface DataItem {  id: string;  symbol: string;           // 股票代码  companyName: string;      // 公司名称  price: number;            // 当前价格  change: number;           // 涨跌额  changePercent: number;    // 涨跌幅  volume: number;           // 成交量  marketCap: number;        // 市值  lastUpdated: string;      // 最后更新时间}export const Dashboard: React.FC = () => {  const { user, logout, isAdmin } = useAuth();  const [items, setItems] = useState<DataItem[]>([]);  const [isLoading, setIsLoading] = useState(false);  const [isAdding, setIsAdding] = useState(false);  const [searchTerm, setSearchTerm] = useState('');  const [sortBy, setSortBy] = useState<keyof DataItem>('symbol');  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');  // 使用布尔值来控制视图，避免TypeScript类型比较问题  const [showAdminPanel, setShowAdminPanel] = useState(false);  const [error, setError] = useState<string | null>(null);  // 获取股票数据  const fetchStockData = async () => {    setIsLoading(true);    setError(null);    try {      // 优先从API获取数据      const userStocks = await stockService.getUserStocks();      // 转换API数据格式为组件所需格式      const transformedData: DataItem[] = userStocks.map((userStock: UserStock) => ({        id: userStock.id,        symbol: userStock.stock.symbol,        companyName: userStock.stock.companyName,        price: userStock.stock.price,        change: userStock.stock.change,        changePercent: userStock.stock.changePercent,        volume: userStock.stock.volume,        marketCap: userStock.stock.marketCap,        lastUpdated: userStock.stock.lastUpdated,      }));      setItems(transformedData);    } catch (error) {      console.error('获取股票数据失败:', error);      setError('获取股票数据失败，请稍后重试');      // API失败时使用模拟数据作为后备方案      const mockData: DataItem[] = [        {          id: 'mock-1',          symbol: 'AAPL',          companyName: 'Apple Inc.',          price: 150.25,          change: 2.15,          changePercent: 1.45,          volume: 50000000,          marketCap: 2500000000000,          lastUpdated: new Date().toISOString(),        },        {          id: 'mock-2',          symbol: 'GOOGL',          companyName: 'Alphabet Inc.',          price: 2750.80,          change: -15.20,          changePercent: -0.55,          volume: 25000000,          marketCap: 1800000000000,          lastUpdated: new Date().toISOString(),        },        {          id: 'mock-3',          symbol: 'TSLA',          companyName: 'Tesla, Inc.',          price: 850.45,          change: 12.30,          changePercent: 1.47,          volume: 45000000,          marketCap: 850000000000,          lastUpdated: new Date().toISOString(),        }      ];      setItems(mockData);    } finally {      setIsLoading(false);    }  };  // 添加股票到监控列表  const addStock = async (symbol: string) => {    try {      setError(null);      const userStock = await stockService.addUserStock(symbol);      // 将新添加的股票转换为组件格式并添加到列表      const newItem: DataItem = {        id: userStock.id,        symbol: userStock.stock.symbol,        companyName: userStock.stock.companyName,        price: userStock.stock.price,        change: userStock.stock.change,        changePercent: userStock.stock.changePercent,        volume: userStock.stock.volume,        marketCap: userStock.stock.marketCap,        lastUpdated: userStock.stock.lastUpdated,      };      setItems(prev => [...prev, newItem]);    } catch (error) {      console.error('添加股票失败:', error);      setError('添加股票失败，请检查股票代码是否正确');      // API失败时创建模拟数据      const mockItem: DataItem = {        id: `mock-${Date.now()}`,        symbol: symbol.toUpperCase(),        companyName: `${symbol.toUpperCase()} Company`,        price: Math.random() * 1000 + 50,        change: (Math.random() - 0.5) * 20,        changePercent: (Math.random() - 0.5) * 5,        volume: Math.floor(Math.random() * 100000000),        marketCap: Math.floor(Math.random() * 1000000000000),        lastUpdated: new Date().toISOString(),      };      setItems(prev => [...prev, mockItem]);    }  };  // 删除股票  const removeStock = async (id: string) => {    try {      setError(null);      await stockService.removeUserStock(id);      setItems(prev => prev.filter(item => item.id !== id));    } catch (error) {      console.error('删除股票失败:', error);      setError('删除股票失败，请稍后重试');      // 即使API失败，也从本地列表中移除      setItems(prev => prev.filter(item => item.id !== id));    }  };  // 刷新股票数据（获取最新报价）  const refreshStockPrices = async () => {    if (items.length === 0) return;    try {      setError(null);      const symbols = items.map(item => item.symbol);      const quotes = await stockService.getBatchQuotes(symbols);      // 更新价格数据      setItems(prev => prev.map(item => {        const quote = quotes.find(q => q.symbol === item.symbol);        return quote ? {          ...item,          price: quote.price,          change: quote.change,          changePercent: quote.changePercent,          volume: quote.volume,          lastUpdated: quote.timestamp,        } : item;      }));    } catch (error) {      console.error('刷新股票价格失败:', error);      // 静默失败，不显示错误信息    }  };  // 处理排序  const handleSort = (field: keyof DataItem) => {    if (sortBy === field) {      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');    } else {      setSortBy(field);      setSortOrder('asc');    }  };  // 过滤和排序数据  const filteredAndSortedItems = items    .filter(item =>      item.symbol.toLowerCase().includes(searchTerm.toLowerCase()) ||      item.companyName.toLowerCase().includes(searchTerm.toLowerCase())    )    .sort((a, b) => {      const aValue = a[sortBy];      const bValue = b[sortBy];      if (typeof aValue === 'string' && typeof bValue === 'string') {        return sortOrder === 'asc'          ? aValue.localeCompare(bValue)          : bValue.localeCompare(aValue);      }      if (typeof aValue === 'number' && typeof bValue === 'number') {        return sortOrder === 'asc' ? aValue - bValue : bValue - aValue;      }      return 0;    });  // 格式化数字  const formatNumber = (num: number, decimals: number = 2): string => {    return new Intl.NumberFormat('en-US', {      minimumFractionDigits: decimals,      maximumFractionDigits: decimals,    }).format(num);  };  // 格式化市值  const formatMarketCap = (marketCap: number): string => {    if (marketCap >= 1e12) {      return `${formatNumber(marketCap / 1e12, 1)}T`;    } else if (marketCap >= 1e9) {      return `${formatNumber(marketCap / 1e9, 1)}B`;    } else if (marketCap >= 1e6) {      return `${formatNumber(marketCap / 1e6, 1)}M`;    }    return `${formatNumber(marketCap)}`;  };  // 格式化时间  const formatTime = (timestamp: string) => {    return new Date(timestamp).toLocaleString('zh-CN', {      month: '2-digit',      day: '2-digit',      hour: '2-digit',      minute: '2-digit',    });  };  useEffect(() => {    if (!showAdminPanel) {      fetchStockData();      // 设置定时刷新股票价格      const priceRefreshInterval = setInterval(refreshStockPrices, 30000); // 30秒刷新价格      const dataRefreshInterval = setInterval(fetchStockData, 300000); // 5分钟刷新完整数据      return () => {        clearInterval(priceRefreshInterval);        clearInterval(dataRefreshInterval);      };    }  }, [showAdminPanel, items.length]);  // 如果当前视图是管理员面板，渲染管理员面板  if (showAdminPanel) {    return <AdminPanel />;  }  return (    <div className="dashboard">      {/* 头部 */}      <header className="dashboard-header">        <div className="header-left">          <h1>美股投资监控台</h1>          <p>欢迎回来，{user?.username}！{user?.role === 'admin' && ' (管理员)'}</p>        </div>        <div className="header-right">          <div className="view-switcher">            <button              className={`view-btn ${!showAdminPanel ? 'active' : ''}`}              onClick={() => setShowAdminPanel(false)}            >              📈 股票监控            </button>            {isAdmin() && (              <button                className={`view-btn ${showAdminPanel ? 'active' : ''}`}                onClick={() => setShowAdminPanel(true)}              >                ⚙️ 管理面板              </button>            )}          </div>          <button            className="refresh-btn"            onClick={fetchStockData}            disabled={isLoading}            title="刷新股票数据"          >            {isLoading ? '刷新中...' : '🔄 刷新'}          </button>          <button className="logout-btn" onClick={logout}>            登出          </button>        </div>      </header>      {/* 错误提示 */}      {error && (        <div className="error-banner">          <span className="error-icon">⚠️</span>          <span className="error-message">{error}</span>          <button            className="error-close"            onClick={() => setError(null)}            aria-label="关闭错误提示"          >            ×          </button>        </div>      )}      {/* 工具栏 */}      <div className="toolbar">        <div className="search-container">          <input            type="text"            placeholder="搜索股票代码或公司名称..."            value={searchTerm}            onChange={(e) => setSearchTerm(e.target.value)}            className="search-input"          />        </div>        <div className="toolbar-actions">          <button            className="refresh-prices-btn"            onClick={refreshStockPrices}            disabled={items.length === 0}            title="刷新股票价格"          >            💱 刷新价格          </button>          <button            className="add-stock-btn"            onClick={() => setIsAdding(true)}          >            ➕ 添加股票          </button>        </div>      </div>      {/* 投资组合概览 */}      {items.length > 0 && (        <div className="portfolio-overview">          <div className="overview-card">            <h3>投资组合概览</h3>            <div className="overview-stats">              <div className="stat-item">                <span className="stat-label">持有股票</span>                <span className="stat-value">{items.length}</span>              </div>              <div className="stat-item">                <span className="stat-label">总市值</span>                <span className="stat-value">                  {formatMarketCap(items.reduce((sum, item) => sum + item.marketCap, 0))}                </span>              </div>              <div className="stat-item">                <span className="stat-label">平均涨跌幅</span>                <span className={`stat-value ${items.reduce((sum, item) => sum + item.changePercent, 0) / items.length >= 0 ? 'positive' : 'negative'}`}>                  {formatNumber(items.reduce((sum, item) => sum + item.changePercent, 0) / items.length)}%                </span>              </div>              <div className="stat-item">                <span className="stat-label">最后更新</span>                <span className="stat-value">                  {items.length > 0 ? formatTime(items[0].lastUpdated) : '--'}                </span>              </div>            </div>          </div>        </div>      )}      {/* 股票列表 */}      <div className="stock-table-container">        {isLoading && items.length === 0 ? (          <div className="loading-message">            <div className="loading-spinner"></div>            <p>正在加载股票数据...</p>          </div>        ) : (          <table className="stock-table">            <thead>              <tr>                <th onClick={() => handleSort('symbol')} className="sortable">                  股票代码 {sortBy === 'symbol' && (sortOrder === 'asc' ? '↑' : '↓')}                </th>                <th onClick={() => handleSort('companyName')} className="sortable">                  公司名称 {sortBy === 'companyName' && (sortOrder === 'asc' ? '↑' : '↓')}                </th>                <th onClick={() => handleSort('price')} className="sortable">                  当前价格 {sortBy === 'price' && (sortOrder === 'asc' ? '↑' : '↓')}                </th>                <th onClick={() => handleSort('change')} className="sortable">                  涨跌额 {sortBy === 'change' && (sortOrder === 'asc' ? '↑' : '↓')}                </th>                <th onClick={() => handleSort('changePercent')} className="sortable">                  涨跌幅 {sortBy === 'changePercent' && (sortOrder === 'asc' ? '↑' : '↓')}                </th>                <th onClick={() => handleSort('volume')} className="sortable">                  成交量 {sortBy === 'volume' && (sortOrder === 'asc' ? '↑' : '↓')}                </th>                <th onClick={() => handleSort('marketCap')} className="sortable">                  市值 {sortBy === 'marketCap' && (sortOrder === 'asc' ? '↑' : '↓')}                </th>                <th onClick={() => handleSort('lastUpdated')} className="sortable">                  更新时间 {sortBy === 'lastUpdated' && (sortOrder === 'asc' ? '↑' : '↓')}                </th>                <th>操作</th>              </tr>            </thead>            <tbody>              {filteredAndSortedItems.map((item) => (                <tr key={item.id} className="stock-row">                  <td className="symbol">                    <span className="symbol-text">{item.symbol}</span>                  </td>                  <td className="company-name" title={item.companyName}>                    {item.companyName}                  </td>                  <td className="price">                    ${formatNumber(item.price)}                  </td>                  <td className={`change ${item.change >= 0 ? 'positive' : 'negative'}`}>                    {item.change >= 0 ? '+' : ''}${formatNumber(item.change)}                  </td>                  <td className={`change-percent ${item.changePercent >= 0 ? 'positive' : 'negative'}`}>                    {item.changePercent >= 0 ? '+' : ''}{formatNumber(item.changePercent)}%                  </td>                  <td className="volume">                    {formatNumber(item.volume, 0)}                  </td>                  <td className="market-cap">                    {formatMarketCap(item.marketCap)}                  </td>                  <td className="last-updated">                    {formatTime(item.lastUpdated)}                  </td>                  <td className="actions">                    <button                      className="remove-btn"                      onClick={() => removeStock(item.id)}                      title={`移除 ${item.symbol}`}                    >                      🗑️ 移除                    </button>                  </td>                </tr>              ))}            </tbody>          </table>        )}        {filteredAndSortedItems.length === 0 && !isLoading && (          <div className="empty-message">            <div className="empty-icon">📈</div>            <h3>              {searchTerm ? '没有找到匹配的股票' : '暂无监控的股票'}            </h3>            <p>              {searchTerm                ? '尝试修改搜索条件或清空搜索框查看所有股票'                : '点击"添加股票"按钮开始监控您感兴趣的股票'              }            </p>            {!searchTerm && (              <button                className="add-stock-btn primary"                onClick={() => setIsAdding(true)}              >                ➕ 添加第一只股票              </button>            )}          </div>        )}      </div>      {/* 添加股票模态框 */}      {isAdding && (        <AddStockModal          onAdd={addStock}          onClose={() => setIsAdding(false)}        />      )}    </div>  );};// 添加股票模态框组件interface AddStockModalProps {  onAdd: (symbol: string) => void;  onClose: () => void;}const AddStockModal: React.FC<AddStockModalProps> = ({ onAdd, onClose }) => {  const [symbol, setSymbol] = useState('');  const [isSearching, setIsSearching] = useState(false);  const [searchResults, setSearchResults] = useState<any[]>([]);  const [error, setError] = useState('');  // 搜索股票  const searchStocks = async (query: string) => {    if (query.length < 2) {      setSearchResults([]);      return;    }    setIsSearching(true);    setError('');    try {      const results = await stockService.searchStocks(query);      setSearchResults(results.slice(0, 10)); // 限制显示10个结果    } catch (error) {      console.error('搜索股票失败:', error);      setError('搜索失败，请稍后重试');      setSearchResults([]);    } finally {      setIsSearching(false);    }  };  // 防抖搜索  useEffect(() => {    const timer = setTimeout(() => {      searchStocks(symbol);    }, 300);    return () => clearTimeout(timer);  }, [symbol]);  const handleSubmit = (e: React.FormEvent) => {    e.preventDefault();    if (symbol.trim()) {      onAdd(symbol.toUpperCase().trim());      onClose();    }  };  const handleSelectStock = (selectedSymbol: string) => {    onAdd(selectedSymbol);    onClose();  };  return (    <div className="modal-overlay" onClick={onClose}>      <div className="modal-content add-stock-modal" onClick={(e) => e.stopPropagation()}>        <div className="modal-header">          <h3>添加股票到监控列表</h3>          <button className="modal-close" onClick={onClose}>×</button>        </div>        <form onSubmit={handleSubmit} className="add-stock-form">          <div className="form-group">            <label htmlFor="stock-symbol">股票代码或公司名称</label>            <input              id="stock-symbol"              type="text"              placeholder="输入股票代码 (如: AAPL, GOOGL, TSLA) 或公司名称"              value={symbol}              onChange={(e) => setSymbol(e.target.value)}              autoFocus              autoComplete="off"            />            {isSearching && <div className="search-loading">搜索中...</div>}            {error && <div className="search-error">{error}</div>}          </div>          {/* 搜索结果 */}          {searchResults.length > 0 && (            <div className="search-results">              <h4>搜索结果:</h4>              <ul className="results-list">                {searchResults.map((result, index) => (                  <li                    key={index}                    className="result-item"                    onClick={() => handleSelectStock(result.symbol)}                  >                    <div className="result-symbol">{result.symbol}</div>                    <div className="result-name">{result.name}</div>                    <div className="result-type">{result.type} • {result.region}</div>                  </li>                ))}              </ul>            </div>          )}          <div className="modal-actions">            <button type="button" className="cancel-btn" onClick={onClose}>              取消            </button>            <button              type="submit"              className="submit-btn"              disabled={!symbol.trim()}            >              添加            </button>          </div>        </form>        <div className="modal-tips">          <h4>💡 提示:</h4>          <ul>            <li>输入美股代码如 AAPL (苹果)、GOOGL (谷歌)、TSLA (特斯拉)</li>            <li>也可以输入公司名称进行搜索</li>            <li>系统会自动获取最新的股票数据</li>          </ul>        </div>      </div>    </div>  );};