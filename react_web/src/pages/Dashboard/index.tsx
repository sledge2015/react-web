// src/pages/Dashboard/index.tsx - 主界面布局import React, { useState, useEffect, useCallback } from 'react';import {  Layout,  Menu,  Card,  Table,  Button,  Space,  Tag,  Typography,  Row,  Col,  Statistic,  Input,  message,  Spin,  Empty,  Tooltip,  Modal,  Form,  AutoComplete,  Avatar,  Dropdown,  Badge,} from 'antd';import {  UserOutlined,  StockOutlined,  DollarOutlined,  RiseOutlined,  PlusOutlined,  SearchOutlined,  ReloadOutlined,  DeleteOutlined,  EyeOutlined,  LogoutOutlined,  SettingOutlined,  BellOutlined,  MenuFoldOutlined,  MenuUnfoldOutlined,  DashboardOutlined,  BarChartOutlined,  TeamOutlined,  FileTextOutlined,  SafetyOutlined,  HeartOutlined,  StarOutlined,  TrophyOutlined,} from '@ant-design/icons';import {  LineChart,  Line,  XAxis,  YAxis,  CartesianGrid,  Tooltip as RechartsTooltip,  ResponsiveContainer,  PieChart,  Pie,  Cell,} from 'recharts';import { useAuth, APIClient } from '../../hooks/useAuth';import AdminPanel from '../../components/AdminPanel';const { Header, Content, Sider } = Layout;const { Title, Text } = Typography;const { Search } = Input;// 接口定义interface Stock {  id: string;  symbol: string;  companyName: string;  price: number;  change: number;  changePercent: number;  volume: number;  marketCap: number;  lastUpdated: string;}interface UserStock {  id: string;  symbol: string;  addedAt: string;  notes?: string;  alertPrice?: number;  stock: Stock;}interface PortfolioSummary {  totalValue: number;  totalGainLoss: number;  totalGainLossPercent: number;  stockCount: number;}interface StockSearchResult {  symbol: string;  name: string;  type: string;}// 颜色配置const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];const Dashboard: React.FC = () => {  const { user, logout, hasPermission } = useAuth();  const [collapsed, setCollapsed] = useState(false);  const [selectedMenu, setSelectedMenu] = useState('portfolio');  const [loading, setLoading] = useState(true);  const [userStocks, setUserStocks] = useState<UserStock[]>([]);  const [portfolioSummary, setPortfolioSummary] = useState<PortfolioSummary | null>(null);  const [searchResults, setSearchResults] = useState<StockSearchResult[]>([]);  const [searchLoading, setSearchLoading] = useState(false);  const [refreshing, setRefreshing] = useState(false);  const [selectedStock, setSelectedStock] = useState<UserStock | null>(null);  const [modalVisible, setModalVisible] = useState(false);  const [form] = Form.useForm();  // 获取用户股票列表  const fetchUserStocks = useCallback(async () => {    try {      setRefreshing(true);      const response = await APIClient.get('/stocks/user');      if (response.success) {        setUserStocks(response.data || []);      }    } catch (error) {      console.error('获取股票列表失败:', error);      // 使用模拟数据作为后备      setUserStocks([        {          id: 'us-1',          symbol: 'AAPL',          addedAt: '2024-01-15T00:00:00.000Z',          notes: '苹果公司',          stock: {            id: 'stock-aapl',            symbol: 'AAPL',            companyName: 'Apple Inc.',            price: 175.43,            change: 2.15,            changePercent: 1.24,            volume: 52467890,            marketCap: 2750000000000,            lastUpdated: new Date().toISOString(),          },        },        {          id: 'us-2',          symbol: 'GOOGL',          addedAt: '2024-01-20T00:00:00.000Z',          notes: 'Google母公司',          stock: {            id: 'stock-googl',            symbol: 'GOOGL',            companyName: 'Alphabet Inc.',            price: 142.56,            change: -1.23,            changePercent: -0.86,            volume: 25789123,            marketCap: 1800000000000,            lastUpdated: new Date().toISOString(),          },        },        {          id: 'us-3',          symbol: 'MSFT',          addedAt: '2024-02-01T00:00:00.000Z',          notes: '微软',          stock: {            id: 'stock-msft',            symbol: 'MSFT',            companyName: 'Microsoft Corporation',            price: 378.85,            change: 4.67,            changePercent: 1.25,            volume: 31456789,            marketCap: 2820000000000,            lastUpdated: new Date().toISOString(),          },        },      ]);    } finally {      setRefreshing(false);    }  }, []);  // 获取投资组合汇总  const fetchPortfolioSummary = useCallback(async () => {    try {      const response = await APIClient.get('/stocks/portfolio/summary');      if (response.success) {        setPortfolioSummary(response.data);      }    } catch (error) {      console.error('获取投资组合汇总失败:', error);      // 使用模拟数据作为后备      setPortfolioSummary({        totalValue: 158750.25,        totalGainLoss: 12345.67,        totalGainLossPercent: 8.44,        stockCount: 3,      });    }  }, []);  // 搜索股票  const handleSearch = async (value: string) => {    if (!value.trim()) {      setSearchResults([]);      return;    }    try {      setSearchLoading(true);      const response = await APIClient.get(`/stocks/search?q=${encodeURIComponent(value)}`);      if (response.success) {        setSearchResults(response.data || []);      }    } catch (error) {      console.error('搜索股票失败:', error);      // 使用模拟数据作为后备      setSearchResults([        { symbol: 'AAPL', name: 'Apple Inc.', type: 'Equity' },        { symbol: 'GOOGL', name: 'Alphabet Inc.', type: 'Equity' },        { symbol: 'MSFT', name: 'Microsoft Corporation', type: 'Equity' },        { symbol: 'TSLA', name: 'Tesla Inc.', type: 'Equity' },        { symbol: 'AMZN', name: 'Amazon.com Inc.', type: 'Equity' },      ].filter(stock =>        stock.symbol.toLowerCase().includes(value.toLowerCase()) ||        stock.name.toLowerCase().includes(value.toLowerCase())      ));    } finally {      setSearchLoading(false);    }  };  // 添加股票  const handleAddStock = async (symbol: string) => {    try {      const response = await APIClient.post('/stocks/user', { symbol });      if (response.success) {        setUserStocks(prev => [...prev, response.data]);        setSearchResults([]);        message.success(`已添加 ${symbol} 到您的投资组合`);        fetchPortfolioSummary();      }    } catch (error) {      message.error('添加股票失败');    }  };  // 删除股票  const handleRemoveStock = async (userStockId: string, symbol: string) => {    try {      await APIClient.delete(`/stocks/user/${userStockId}`);      setUserStocks(prev => prev.filter(stock => stock.id !== userStockId));      message.success(`已从投资组合中移除 ${symbol}`);      fetchPortfolioSummary();    } catch (error) {      message.error('删除股票失败');    }  };  // 刷新数据  const handleRefresh = async () => {    await Promise.all([      fetchUserStocks(),      fetchPortfolioSummary(),    ]);    message.success('数据已刷新');  };  // 查看股票详情  const handleViewStock = (stock: UserStock) => {    setSelectedStock(stock);    form.setFieldsValue({      notes: stock.notes,      alertPrice: stock.alertPrice,    });    setModalVisible(true);  };  // 更新股票信息  const handleUpdateStock = async (values: any) => {    if (!selectedStock) return;    try {      await APIClient.put(`/stocks/user/${selectedStock.id}`, values);      setUserStocks(prev =>        prev.map(stock =>          stock.id === selectedStock.id            ? { ...stock, ...values }            : stock        )      );      setModalVisible(false);      message.success('股票信息已更新');    } catch (error) {      message.error('更新失败');    }  };  // 初始化数据  useEffect(() => {    const initializeData = async () => {      try {        setLoading(true);        await Promise.all([          fetchUserStocks(),          fetchPortfolioSummary(),        ]);      } catch (error) {        console.error('初始化失败:', error);      } finally {        setLoading(false);      }    };    initializeData();  }, [fetchUserStocks, fetchPortfolioSummary]);  // 格式化价格  const formatPrice = (price: number) => `$${price.toFixed(2)}`;  // 格式化变化  const formatChange = (change: number, changePercent: number) => {    const isPositive = change >= 0;    const color = isPositive ? '#52c41a' : '#ff4d4f';    const prefix = isPositive ? '+' : '';    return (      <span style={{ color }}>        {prefix}{formatPrice(change)} ({prefix}{changePercent.toFixed(2)}%)      </span>    );  };  // 股票表格列  const stockColumns = [    {      title: '股票代码',      dataIndex: 'symbol',      key: 'symbol',      render: (symbol: string, record: UserStock) => (        <Space direction="vertical" size={0}>          <Text strong style={{ fontSize: '16px' }}>{symbol}</Text>          <Text type="secondary" style={{ fontSize: '12px' }}>            {record.stock.companyName}          </Text>        </Space>      ),    },    {      title: '当前价格',      dataIndex: ['stock', 'price'],      key: 'price',      render: (price: number) => (        <Text strong style={{ fontSize: '16px' }}>          {formatPrice(price)}        </Text>      ),    },    {      title: '涨跌',      key: 'change',      render: (_: any, record: UserStock) =>        formatChange(record.stock.change, record.stock.changePercent),    },    {      title: '成交量',      dataIndex: ['stock', 'volume'],      key: 'volume',      render: (volume: number) => volume.toLocaleString(),    },    {      title: '操作',      key: 'actions',      render: (_: any, record: UserStock) => (        <Space>          <Tooltip title="查看详情">            <Button              type="text"              icon={<EyeOutlined />}              onClick={() => handleViewStock(record)}            />          </Tooltip>          <Tooltip title="删除">            <Button              type="text"              danger              icon={<DeleteOutlined />}              onClick={() => handleRemoveStock(record.id, record.symbol)}            />          </Tooltip>        </Space>      ),    },  ];  // 生成图表数据  const generateChartData = () => {    return userStocks.map(stock => ({      symbol: stock.symbol,      price: stock.stock.price,      change: stock.stock.changePercent,    }));  };  const generatePieData = () => {    return userStocks.map((stock, index) => ({      name: stock.symbol,      value: stock.stock.marketCap,      color: COLORS[index % COLORS.length],    }));  };  // 侧边栏菜单项  const menuItems = [    {      key: 'portfolio',      icon: <DashboardOutlined />,      label: '投资组合',    },    {      key: 'watchlist',      icon: <HeartOutlined />,      label: '关注列表',    },    {      key: 'market',      icon: <BarChartOutlined />,      label: '市场行情',    },    {      key: 'analysis',      icon: <TrophyOutlined />,      label: '分析工具',    },    {      key: 'favorites',      icon: <StarOutlined />,      label: '收藏夹',    },    ...(hasPermission('system.config') ? [{      key: 'admin',      icon: <TeamOutlined />,      label: '系统管理',    }] : []),  ];  // 用户下拉菜单  const userMenuItems = [    {      key: 'profile',      icon: <UserOutlined />,      label: '个人资料',    },    {      key: 'settings',      icon: <SettingOutlined />,      label: '设置',    },    // 添加管理员菜单项（仅管理员可见）    ...(hasPermission('system.config') ? [{      key: 'admin',      icon: <TeamOutlined />,      label: '管理面板',    }] : []),    {      key: 'logout',      icon: <LogoutOutlined />,      label: '退出登录',      onClick: logout,    },  ];  // 渲染主要内容  const renderContent = () => {    if (loading) {      return (        <div style={{          height: '60vh',          display: 'flex',          justifyContent: 'center',          alignItems: 'center',        }}>          <Spin size="large" />          <div style={{ marginLeft: '16px' }}>加载投资组合数据...</div>        </div>      );    }    switch (selectedMenu) {      case 'portfolio':        return (          <>            {/* 投资组合汇总 */}            {portfolioSummary && (              <Row gutter={[16, 16]} style={{ marginBottom: '24px' }}>                <Col xs={24} sm={6}>                  <Card>                    <Statistic                      title="总价值"                      value={portfolioSummary.totalValue}                      precision={2}                      prefix={<DollarOutlined />}                      valueStyle={{ color: '#1890ff' }}                    />                  </Card>                </Col>                <Col xs={24} sm={6}>                  <Card>                    <Statistic                      title="总收益"                      value={portfolioSummary.totalGainLoss}                      precision={2}                      prefix={<RiseOutlined />}                      valueStyle={{                        color: portfolioSummary.totalGainLoss >= 0 ? '#52c41a' : '#ff4d4f'                      }}                    />                  </Card>                </Col>                <Col xs={24} sm={6}>                  <Card>                    <Statistic                      title="收益率"                      value={portfolioSummary.totalGainLossPercent}                      precision={2}                      suffix="%"                      valueStyle={{                        color: portfolioSummary.totalGainLossPercent >= 0 ? '#52c41a' : '#ff4d4f'                      }}                    />                  </Card>                </Col>                <Col xs={24} sm={6}>                  <Card>                    <Statistic                      title="持股数量"                      value={portfolioSummary.stockCount}                      prefix={<StockOutlined />}                      valueStyle={{ color: '#722ed1' }}                    />                  </Card>                </Col>              </Row>            )}            {/* 股票搜索 */}            <Card style={{ marginBottom: '24px' }}>              <Title level={5}>添加新股票</Title>              <AutoComplete                style={{ width: '100%', maxWidth: '400px' }}                placeholder="输入股票代码或公司名称搜索..."                onSearch={handleSearch}                notFoundContent={searchLoading ? <Spin size="small" /> : null}                options={searchResults.map(result => ({                  value: result.symbol,                  label: (                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>                      <span>                        <strong>{result.symbol}</strong> - {result.name}                      </span>                      <Button                        type="link"                        size="small"                        icon={<PlusOutlined />}                        onClick={() => handleAddStock(result.symbol)}                      >                        添加                      </Button>                    </div>                  ),                }))}              >                <Input                  prefix={<SearchOutlined />}                  placeholder="搜索股票..."                  size="large"                />              </AutoComplete>            </Card>            <Row gutter={[16, 16]}>              {/* 股票列表 */}              <Col xs={24} xl={16}>                <Card title="我的股票">                  {userStocks.length > 0 ? (                    <Table                      columns={stockColumns}                      dataSource={userStocks}                      rowKey="id"                      pagination={{ pageSize: 10 }}                      scroll={{ x: 800 }}                    />                  ) : (                    <Empty description="暂无股票数据">                      <Button type="primary" icon={<PlusOutlined />}>                        添加第一只股票                      </Button>                    </Empty>                  )}                </Card>              </Col>              {/* 图表区域 */}              <Col xs={24} xl={8}>                <Space direction="vertical" size="middle" style={{ width: '100%' }}>                  {/* 价格趋势图 */}                  <Card title="价格趋势" size="small">                    {generateChartData().length > 0 ? (                      <ResponsiveContainer width="100%" height={200}>                        <LineChart data={generateChartData()}>                          <CartesianGrid strokeDasharray="3 3" />                          <XAxis dataKey="symbol" />                          <YAxis />                          <RechartsTooltip />                          <Line                            type="monotone"                            dataKey="price"                            stroke="#1890ff"                            strokeWidth={2}                          />                        </LineChart>                      </ResponsiveContainer>                    ) : (                      <Empty description="暂无数据" />                    )}                  </Card>                  {/* 市值分布 */}                  <Card title="市值分布" size="small">                    {generatePieData().length > 0 ? (                      <ResponsiveContainer width="100%" height={200}>                        <PieChart>                          <Pie                            data={generatePieData()}                            cx="50%"                            cy="50%"                            labelLine={false}                            label={({ name, percent }) =>                              `${name} ${((percent ?? 0) * 100).toFixed(0)}%`                            }                            outerRadius={60}                            fill="#8884d8"                            dataKey="value"                          >                            {generatePieData().map((entry, index) => (                              <Cell key={`cell-${index}`} fill={entry.color} />                            ))}                          </Pie>                          <RechartsTooltip />                        </PieChart>                      </ResponsiveContainer>                    ) : (                      <Empty description="暂无数据" />                    )}                  </Card>                </Space>              </Col>            </Row>          </>        );      case 'admin':        return <AdminPanel />;      case 'watchlist':        return (          <Card>            <Empty              description="关注列表功能开发中..."              image="/api/placeholder/400/300"            />          </Card>        );      case 'market':        return (          <Card>            <Empty              description="市场行情功能开发中..."              image="/api/placeholder/400/300"            />          </Card>        );      case 'analysis':        return (          <Card>            <Empty              description="分析工具功能开发中..."              image="/api/placeholder/400/300"            />          </Card>        );      case 'favorites':        return (          <Card>            <Empty              description="收藏夹功能开发中..."              image="/api/placeholder/400/300"            />          </Card>        );      default:        return (          <Card>            <Empty description="页面不存在" />          </Card>        );    }  };  return (    <Layout style={{ minHeight: '100vh' }}>      {/* 侧边栏 */}      <Sider        trigger={null}        collapsible        collapsed={collapsed}        width={240}        style={{          background: '#fff',          boxShadow: '2px 0 8px rgba(0,0,0,0.1)',        }}      >        {/* Logo区域 */}        <div style={{          height: 64,          display: 'flex',          alignItems: 'center',          justifyContent: collapsed ? 'center' : 'flex-start',          padding: collapsed ? '0' : '0 24px',          borderBottom: '1px solid #f0f0f0',          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',        }}>          <div style={{            color: 'white',            fontSize: collapsed ? '24px' : '20px',            fontWeight: 'bold',          }}>            {collapsed ? '📈' : '📈 美股投资'}          </div>        </div>        {/* 菜单 */}        <Menu          mode="inline"          selectedKeys={[selectedMenu]}          style={{ borderRight: 0, marginTop: 8 }}          onClick={({ key }) => setSelectedMenu(key)}          items={menuItems}        />      </Sider>      {/* 主要内容区域 */}      <Layout>        {/* 头部 */}        <Header style={{          background: '#fff',          padding: '0 24px',          display: 'flex',          justifyContent: 'space-between',          alignItems: 'center',          boxShadow: '0 2px 8px rgba(0,0,0,0.1)',        }}>          <div style={{ display: 'flex', alignItems: 'center' }}>            <Button              type="text"              icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}              onClick={() => setCollapsed(!collapsed)}              style={{ fontSize: '16px', width: 48, height: 48 }}            />            <Title level={4} style={{ margin: '0 0 0 16px', color: '#1f2937' }}>              {menuItems.find(item => item.key === selectedMenu)?.label || '投资组合'}            </Title>          </div>          <Space size="middle">            {/* 刷新按钮 */}            <Tooltip title="刷新数据">              <Button                icon={<ReloadOutlined />}                onClick={handleRefresh}                loading={refreshing}                type="text"              />            </Tooltip>            {/* 通知 */}            <Tooltip title="通知">              <Badge count={3} size="small">                <Button icon={<BellOutlined />} type="text" />              </Badge>            </Tooltip>            {/* 用户菜单 */}            <Dropdown              menu={{                items: userMenuItems,                onClick: ({ key }) => {                  if (key === 'logout') {                    logout();                  }else if (key === 'admin') {                    setSelectedMenu('admin'); // 添加这行                  }                  //其他菜单处理项目                },              }}              placement="bottomRight"              arrow            >              <Space style={{ cursor: 'pointer' }}>                <Avatar size="small">                  {user?.avatar || user?.username?.charAt(0).toUpperCase()}                </Avatar>                <Text>{user?.username}</Text>              </Space>            </Dropdown>          </Space>        </Header>        {/* 内容区域 */}        <Content style={{          padding: '24px',          background: '#f5f5f5',          overflow: 'auto',        }}>          {renderContent()}        </Content>      </Layout>      {/* 股票详情模态框 */}      <Modal        title={`股票详情 - ${selectedStock?.symbol}`}        open={modalVisible}        onCancel={() => setModalVisible(false)}        footer={null}        width={500}      >        {selectedStock && (          <Form            form={form}            layout="vertical"            onFinish={handleUpdateStock}          >            <Space direction="vertical" style={{ width: '100%' }}>              <div>                <Text strong>公司名称：</Text>                <Text>{selectedStock.stock.companyName}</Text>              </div>              <div>                <Text strong>当前价格：</Text>                <Text style={{ fontSize: '18px', fontWeight: 'bold' }}>                  {formatPrice(selectedStock.stock.price)}                </Text>              </div>              <div>                <Text strong>涨跌幅：</Text>                {formatChange(selectedStock.stock.change, selectedStock.stock.changePercent)}              </div>            </Space>            <Form.Item name="notes" label="备注" style={{ marginTop: 16 }}>              <Input.TextArea rows={3} placeholder="添加您的投资备注..." />            </Form.Item>            <Form.Item name="alertPrice" label="价格提醒">              <Input type="number" placeholder="设置价格提醒..." prefix="$" />            </Form.Item>            <Form.Item>              <Space>                <Button type="primary" htmlType="submit">                  保存设置                </Button>                <Button onClick={() => setModalVisible(false)}>                  取消                </Button>              </Space>            </Form.Item>          </Form>        )}      </Modal>    </Layout>  );};export default Dashboard;